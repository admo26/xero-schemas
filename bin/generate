#!/usr/bin/env php
<?php

include __DIR__ . '/../vendor/autoload.php';

use Calcinai\Strut\Definitions\Definitions;
use Calcinai\Strut\Definitions\Info;
use Calcinai\Strut\Definitions\Schema;
use Calcinai\Strut\Definitions\Schema\Properties\Properties;
use Calcinai\Strut\Swagger;
use Calcinai\XeroSchemaGenerator\API;
use Calcinai\XeroSchemaGenerator\ParsedObject\Model\Property;
use Calcinai\XeroSchemaGenerator\Scraper;

$scraper = new Scraper('http://developer.xero.com/documentation');

$accounting_api = new API('Accounting API', 'Accounting');
$scraper->scrapeEnums($accounting_api, 'api/types');
$scraper->scrapeModels($accounting_api, 'api', [
//    'accounts',
//    //'bankstatements',
//    'banktransactions',
//    'bank-transfers',
//    'branding-themes',
    'contacts',
//    'contactgroups',
//    'credit-notes',
//    'currencies',
//    'employees',
//    'expense-claims',
//    'invoices',
//    'items',
//    'journals',
//    'linked-transactions',
//    'manual-journals',
//    'organisation',
//    'overpayments',
//    'payments',
//    'prepayments',
//    'purchase-orders',
//    'quotes',
//    'receipts',
//    'repeating-invoices',
//    //'reports', - this is in a way different format
//    'tax-rates',
//    'tracking-categories',
//    'users'
//]);

//print_r($accounting_api);
//
//
//exit;
//
//$payroll_api = new API('Payroll - AU', 'PayrollAU');
//$scraper->scrapeEnums($payroll_api, 'payroll-api/types-and-codes');
//$scraper->scrapeModels($payroll_api, 'payroll-api', [
//    'employees',
//    'leaveapplications',
//    'payitems',
//    'payrollcalendars',
//    'payruns',
//    'payslip',
//    'settings',
//    'superfunds',
//    'superfundproducts',
//    'timesheets'
//]);
//
//$payroll_api_us = new API('Payroll - US', 'PayrollUS');
//$scraper->scrapeEnums($payroll_api_us, 'payroll-api-us/types-codes');
//$scraper->scrapeModels($payroll_api_us, 'payroll-api-us', [
//    'employees',
//    'pay-items',
//    'pay-runs',
//    'pay-schedules',
//    'pay-stubs',
//    'settings',
//    'timesheets',
//    'work-locations'
//]);
//
//
//$files_api = new API('Files API', 'Files');
//$scraper->scrapeEnums($files_api, 'files-api/types');
//$scraper->scrapeModels($files_api, 'files-api', [
//    'files',
//    'folders',
//    'associations'
]);



$api = $accounting_api;


$swagger = new Swagger();
$swagger->setInfo(
    Info::create()
        ->setTitle($api->getName())
        ->setVersion('1.0.0')
//        ->setLicense(
//            License::create()
//                ->setName('MIT')
//        )
)

    ->setHost('')
    ->setBasePath('/api.xro')
    ->addScheme('https')

    ->setConsumes(['text/xml'])
    ->setProduces(['text/xml', 'application/json']);


$definitions = Definitions::create();

foreach ($accounting_api->getModels() as $model) {

    $schema_properties = Properties::create();
    $schema_model = Schema::create();

    foreach($model->getProperties() as $property_name => $property){

        $schema_property = Schema::create();

        switch($property->getType()){

            case Property::TYPE_BOOLEAN:
                $schema_property->setType('boolean');
                break;
            case Property::TYPE_INT:
                $schema_property->setType('number')->setFormat('double');
                break;
            case Property::TYPE_FLOAT:
                $schema_property->setType('number')->setFormat('float');
                break;
            case Property::TYPE_STRING:
                $schema_property->setType('string');
                break;
            case Property::TYPE_DATE:
                $schema_property->setType('string')->setFormat('date');
                break;
            case Property::TYPE_DATETIME:
                $schema_property->setType('string')->setFormat('date-time');
                break;
        }

        if($property->isMandatory()){
            $schema_model->addRequired($property_name);
        }

        $schema_properties->set($property_name, $property);
    }

    $definitions->set($model->getSingularName(), $schema_model);


}

$swagger->setDefinitions($definitions);
print_r(json_encode($swagger, JSON_PRETTY_PRINT));